#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Nov 30, 2018 04:31:57 PM IST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import welcome_support

graph = {'a': {'b': 15, 'c': 3}, 'b': {'c': 20
    , 'd': 2}, 'c': {'b': 4, 'd': 8, 'e': 2}, 'd': {'e': 7}, 'e': {'d': 9}}


def dijkstra(graph, start, goal):
    shortest_distance = {}
    predecessor = {}
    unseenNodes = graph
    infinity = 9999999
    path = []
    for node in unseenNodes:
        shortest_distance[node] = infinity
    shortest_distance[start] = 0

    while unseenNodes:
        minNode = None
        for node in unseenNodes:
            if minNode is None:
                minNode = node
            elif shortest_distance[node] < shortest_distance[minNode]:
                minNode = node

        for childNode, weight in graph[minNode].items():
            if weight + shortest_distance[minNode] < shortest_distance[childNode]:
                shortest_distance[childNode] = weight + shortest_distance[minNode]
                predecessor[childNode] = minNode
        unseenNodes.pop(minNode)

    currentNode = goal
    while currentNode != start:
        try:
            path.insert(0, currentNode)
            currentNode = predecessor[currentNode]
        except KeyError:
            print('Path not reachable')
            break
    path.insert(0, start)
    if shortest_distance[goal] != infinity:
        print('Shortest distance is ' + str(shortest_distance[goal]))
        print('And the path is ' + str(path))


dijkstra(graph, 'b', 'e')

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    welcome_support.init(root, top)
    root.mainloop()

def graph_show():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root.destroy()
    root = tk.Tk()
    top = Toplevel2 (root)
    welcome_support.init(root, top)
    root.mainloop()


w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    welcome_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 

        top.geometry("600x450+650+150")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.367, rely=0.4, height=26, width=69)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Welcome''')

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.517, rely=0.644, height=33, width=56)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Button''',command=graph_show)

class Toplevel2:
    def highlight(self):
        self.Canvas1.create_line(160, 215, 280, 420, width=5, fill="red")
        self.Canvas1.create_line(250, 420, 500, 420, width=5, fill="red")



    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font9 = "-family {Segoe UI} -size 14 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"

        top.geometry("900x674+650+150")
        top.title("New Toplevel")
        top.configure(background="#ffffff")
        top.configure(highlightbackground="#ffffff")
        top.configure(highlightcolor="black")

        self.Canvas1 = tk.Canvas(top)
        self.Canvas1.place(relx=0.033, rely=0.015, relheight=0.939
                , relwidth=0.948)
        self.Canvas1.configure(background="#ffffff")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(highlightbackground="#d9d9d9")
        self.Canvas1.configure(highlightcolor="black")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief='ridge')
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")
        self.Canvas1.configure(width=853)

        self.Canvas2 = tk.Canvas(self.Canvas1)
        self.Canvas2.place(relx=0.399, rely=0.063, relheight=0.084
                , relwidth=0.074)
        self.Canvas2.configure(background="#d9d9d9")
        self.Canvas2.configure(borderwidth="2")
        self.Canvas2.configure(highlightbackground="#d9d9d9")
        self.Canvas2.configure(highlightcolor="black")
        self.Canvas2.configure(insertbackground="black")
        self.Canvas2.configure(relief='ridge')
        self.Canvas2.configure(selectbackground="#c4c4c4")
        self.Canvas2.configure(selectforeground="black")
        self.Canvas2.configure(width=63)

        self.Canvas2_3 = tk.Canvas(self.Canvas2)
        self.Canvas2_3.place(relx=7.619, rely=1.981, relheight=0.811
                , relwidth=0.841)
        self.Canvas2_3.configure(background="#d9d9d9")
        self.Canvas2_3.configure(borderwidth="2")
        self.Canvas2_3.configure(highlightbackground="#d9d9d9")
        self.Canvas2_3.configure(highlightcolor="black")
        self.Canvas2_3.configure(insertbackground="black")
        self.Canvas2_3.configure(relief='ridge')
        self.Canvas2_3.configure(selectbackground="#c4c4c4")
        self.Canvas2_3.configure(selectforeground="black")
        self.Canvas2_3.configure(width=53)

        self.Label1 = tk.Label(self.Canvas2)
        self.Label1.place(relx=0.317, rely=0.189, height=27, width=21)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font9)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''A''')
        self.Label1.configure(width=21)

        self.Label1_4 = tk.Label(self.Canvas2)
        self.Label1_4.place(relx=5.0, rely=2.543, height=27, width=21)
        self.Label1_4.configure(activebackground="#f9f9f9")
        self.Label1_4.configure(activeforeground="black")
        self.Label1_4.configure(background="#d9d9d9")
        self.Label1_4.configure(disabledforeground="#a3a3a3")
        self.Label1_4.configure(font=font9)
        self.Label1_4.configure(foreground="#000000")
        self.Label1_4.configure(highlightbackground="#d9d9d9")
        self.Label1_4.configure(highlightcolor="black")
        self.Label1_4.configure(text='''A''')

        self.Canvas3 = tk.Canvas(self.Canvas1)
        self.Canvas3.place(relx=0.141, rely=0.316, relheight=0.068
                , relwidth=0.062)
        self.Canvas3.configure(background="#d9d9d9")
        self.Canvas3.configure(borderwidth="2")
        self.Canvas3.configure(highlightbackground="#d9d9d9")
        self.Canvas3.configure(highlightcolor="black")
        self.Canvas3.configure(insertbackground="black")
        self.Canvas3.configure(relief='ridge')
        self.Canvas3.configure(selectbackground="#c4c4c4")
        self.Canvas3.configure(selectforeground="black")
        self.Canvas3.configure(width=53)

        self.Canvas3_1 = tk.Canvas(self.Canvas3)
        self.Canvas3_1.place(relx=8.396, rely=7.209, relheight=1.0, relwidth=1.0)

        self.Canvas3_1.configure(background="#d9d9d9")
        self.Canvas3_1.configure(borderwidth="2")
        self.Canvas3_1.configure(highlightbackground="#d9d9d9")
        self.Canvas3_1.configure(highlightcolor="black")
        self.Canvas3_1.configure(insertbackground="black")
        self.Canvas3_1.configure(relief='ridge')
        self.Canvas3_1.configure(selectbackground="#c4c4c4")
        self.Canvas3_1.configure(selectforeground="black")
        self.Canvas3_1.configure(width=53)

        self.Label2 = tk.Label(self.Canvas3)
        self.Label2.place(relx=0.189, rely=0.233, height=26, width=25)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''B''')
        self.Label2.configure(width=25)

        self.Canvas3_2 = tk.Canvas(self.Canvas1)
        self.Canvas3_2.place(relx=0.27, rely=0.616, relheight=0.068
                , relwidth=0.062)
        self.Canvas3_2.configure(background="#d9d9d9")
        self.Canvas3_2.configure(borderwidth="2")
        self.Canvas3_2.configure(highlightbackground="#d9d9d9")
        self.Canvas3_2.configure(highlightcolor="black")
        self.Canvas3_2.configure(insertbackground="black")
        self.Canvas3_2.configure(relief='ridge')
        self.Canvas3_2.configure(selectbackground="#c4c4c4")
        self.Canvas3_2.configure(selectforeground="black")
        self.Canvas3_2.configure(width=53)

        self.Label4 = tk.Label(self.Canvas3_2)
        self.Label4.place(relx=0.377, rely=0.233, height=26, width=17)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''D''')

        self.Canvas4 = tk.Canvas(self.Canvas1)
        self.Canvas4.place(relx=0.657, rely=0.316, relheight=0.068
                , relwidth=0.062)
        self.Canvas4.configure(background="#d9d9d9")
        self.Canvas4.configure(borderwidth="2")
        self.Canvas4.configure(insertbackground="black")
        self.Canvas4.configure(relief='ridge')
        self.Canvas4.configure(selectbackground="#c4c4c4")
        self.Canvas4.configure(selectforeground="black")
        self.Canvas4.configure(width=53)

        self.Label3 = tk.Label(self.Canvas4)
        self.Label3.place(relx=0.189, rely=0.233, height=26, width=15)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''C''')

        self.Canvas5 = tk.Canvas(self.Canvas1)
        self.Canvas5.place(relx=0.551, rely=0.632, relheight=0.068
                , relwidth=0.062)
        self.Canvas5.configure(background="#d9d9d9")
        self.Canvas5.configure(borderwidth="2")
        self.Canvas5.configure(insertbackground="black")
        self.Canvas5.configure(relief='ridge')
        self.Canvas5.configure(selectbackground="#c4c4c4")
        self.Canvas5.configure(selectforeground="black")
        self.Canvas5.configure(width=53)

        self.Label5 = tk.Label(self.Canvas5)
        self.Label5.place(relx=0.377, rely=0.233, height=26, width=14)
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(text='''E''')

        self.Button1 = tk.Button(self.Canvas1)
        self.Button1.place(relx=0.459, rely=0.803, height=26, width=50)
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(text='''Shortest''',command=self.highlight)

        self.Canvas1.create_line(400,80,580,200,width=5)
        self.Canvas1.create_line(190, 215, 550, 215, width=5)
        self.Canvas1.create_line(190, 235, 550, 235, width=5)

        self.Canvas1.create_line(500, 400, 570, 240, width=5)
        self.Canvas1.create_line(250, 420, 500, 420, width=5)

        self.Canvas1.create_line(350,80, 120, 210, width=5)

        self.Canvas1.create_line(570, 225,250, 420, width=5)
        self.Canvas1.create_line(290, 440, 500, 440, width=5)

        self.Canvas1.create_line(160, 215, 280, 420, width=5)




if __name__ == '__main__':
    vp_start_gui()




